
308. [JAVA 7] try- with-resources statement
309. Rules while handling exceptions
310. The Exception Hierarchy - Part 1
311. The Exception Hierarchy - Part 2

312. Checked Exceptions
313. Unchecked Exceptions
314. throws keyword
315. throw keyword
316. Differences between throw and throws keyword
317. Exception Propagation
318. Nested try block
319. Custom Checked Exception
320. Custom Unchecked Exception
321. final, finally and finalize
322. Funny memes around exception handling

323. DETAILS OF SOURCE CODE AND PDF CONTENT
324. Introduction to the methods in Object class
325. Deep dive on getClass() in Object class
326. Deep dive on hashCode() in Object class - Part 1
327. Deep dive on hashCode() in Object class - Part 2
328. Deep dive on equals() in Object class

329. Override hashCode() & equals() methods

330. Override hashCode() & equals() methods using IntelliJ
331. Deep dive on toString() in Object class
332. Demo of hashCode(), equals() & toString() methods of String
333. Deep dive on finalize() in Object class
334. Deep dive on clone() in Object class

335. Details about Shallow cloning & Deep cloning - Theory
336. Details about Shallow cloning & Deep cloning - Demo
337. Mutable and Immutable objects - Theory

338. Mutable and Immutable objects - Demo
339. [JAVA 16] Record classes - Part 1
340. [JAVA 16] Record classes - Part 2

341. [JAVA 10] var (local variable type inference) - Part 1

342. [JAVA 10] var (local variable type inference) - Part 2
343. DETAILS OF SOURCE CODE AND PDF CONTENT
344. Arrays have limitations
345. What are Collections & why they accept only objects
346. Introduction to Wrapper Classes
347. Convert Primitive Type to Wrapper Objects (Boxing)

348. Convert Wrapper Objects into Primitive Types (Unboxing)
349. Autoboxing and unboxing - Theory
350. Autoboxing and unboxing - Demo
351. Caching with valueOf() methods

352. Java Collection Framework Hierarchy
353. DETAILS OF SOURCE CODE AND PDF CONTENT
354. Deep dive on the Collection Interface

355. [JAVA 21] Deep dive on the Sequenced Collections

356. Deep dive on the List Interface
357. How to create objects of ArrayList
358. Demo of ArrayList

359. [JAVA 7] Diamond Operator in Java
360. ArrayList performance
361. [JAVA 9] Creating Immutable Lists
362. Iterate ArrayList using for-each and iterator()
363. Iterate ArrayList using listIterator()
Bài tập coding 39: ArrayList Operations in Java
364. Sorting ArrayList using sort() methods
365. Sorting ArrayList using custom Comparator
366. Sorting ArrayList of custom data type using Comparable

367. Sorting ArrayList of custom data type using Comparator
Bài tập coding 40: Sort Persons based on age using Comparable
368. Arrays vs ArrayList

369. DETAILS OF SOURCE CODE AND PDF CONTENT
370. Introduction of LinkedList

371. How to create objects of LinkedList
372. Demo of LinkedList
373. Iterate LinkedList elements
374. Sorting LinkedList elements
Bài tập coding 41: LinkedList Operations in Java
375. LinkedList performance
376. ArrayList vs LinkedList
377. Funny memes around LinkedList
378. DETAILS OF SOURCE CODE AND PDF CONTENT
379. Introduction to Generics in Java
380. Why we need Generics in Java

381. Generic class in Java - Demo
Bài tập coding 42: Storage Generic class
382. Generics methods in Java - Demo
Bài tập coding 43: Generic method to swap array elements
383. Collections with out Generics - Demo
Bài tập coding 44: Collections without Generics
384. Covariance Demo

385. Subtype or Upper Bound Wildcards
386. Supertype or Lower Bound Wildcards
387. Unbounded Wildcards
388. DETAILS OF SOURCE CODE AND PDF CONTENT
389. Introduction to Map in Java
390. Demo of HashMap
391. How HashMap Store Key, Value

392. How HashMap retrieve Value
393. [JAVA 8] HashMap improvements in Java 8

394. Iterating HashMap using keySet() and entrySet()
395. Iterating HashMap using values()
Bài tập coding 45: HashMap Operations in Java
396. Introduction to TreeMap in Java
397. Demo of TreeMap in Java
398. Demo of LinkedHashMap in Java
399. [JAVA 9] Creating Immutable Maps

400. DETAILS OF SOURCE CODE AND PDF CONTENT
401. Introduction to Set in Java
402. Demo of HashSet
403. How HashSet works internally

404. Iterating HashSet
Bài tập coding 46: Vowel Remover using HashSet
405. Set operations
406. Demo of TreeSet in Java

407. Demo of LinkedHashSet in Java
408. [JAVA 9] Creating Immutable Sets
409. List vs Set
410. DETAILS OF SOURCE CODE AND PDF CONTENT
411. Introduction to Enums
412. Problems with normal Java class constants approach
413. Demo of Enum approach
414. More details about enum - Part 1

415. More details about enum - Part 2

416. Associating Data to Enum Constants
417. Demo of EnumSet and it important methods
418. Advantages of Enums
Bài tập coding 47: Calculate Toll using Enums
419. DETAILS OF SOURCE CODE AND PDF CONTENT
420. How Java supports Date and Time
421. Why a new Date API introduced in Java 8

422. Demo of java.util.Date - Part 1
423. Demo of java.util.Date - Part 2
424. Date formatting and parsing using SimpleDateFormat
Bài tập coding 48: Create a java.util.Date and format it
425. Demo of java.sql.Date
426. Demo of java.util.Calendar - Part 1

427. Demo of java.util.Calendar - Part 2
428. TimeZone specific Date and Time

Bài tập coding 49: NewYork Date and Time using GregorianCalendar
429. [JAVA 8] Introduction to new Date & Time API from Java 8
430. [JAVA 8] The of() methods in java.time Date and Time API

431. [JAVA 8] The from() & withXxx() methods in java.time Date and Time API
432. [JAVA 8] The toXxx() & atXxx() methods in java.time Date and Time API
433. [JAVA 8} The getXxx(), plusXxx() and minusXxx() methods in new Date & Time API
Bài tập coding 50: New DateTime API operations
434. [JAVA 8] Introduction to Instant and Duration in java.time Date and Time API
435. [JAVA 8] Demo of Instant and Duration in java.time Date and Time API

436. [JAVA 8] Period in java.time Date and Time API
437. [JAVA 8] The multipliedBy(), dividedBy() & negated() methods
438. [JAVA 8] The truncatedTo() method
439. [JAVA 8] Demo of ZoneId, ZonedDateTime
440. [JAVA 8] Demo of ZoneOffset
441. [JAVA 8] Demo of OffsetDateTime and OffsetTime

442. [JAVA 8] Demo of Day Light Saving with ZonedDateTime
Bài tập coding 51: Conference Call scheduling between two teams located in different time zones
443. [JAVA 8] Non-ISO Calendars in java.time Date and Time API
444. [JAVA 8] Formatting Dates and Times using DateTimeFormatter

445. [JAVA 8] Parsing Dates and Times using DateTimeFormatter
Bài tập coding 52: Formatting and Parsing of the Date Time values
446. Funny memes around Java Date and Time APIs
447. DETAILS OF SOURCE CODE AND PDF CONTENT
448. Introduction to Functional Programming
449. Imperative style vs functional style programming

450. What are lambda expressions and their syntax
451. How to build Lambda expressions

452. Deep dive on Functional Interfaces
453. How Functional Interface & Lambda expressions are linked - Part 1
454. How Functional Interface & Lambda expressions are linked - Part 2
Bài tập coding 53: Functional Interface and Lambda expression to transform Strings
455. Anonymous inner class in the place of lambda expressions
456. Predefined Functional interfaces inside JDK
457. Deep dive on Predicate functional interface - Part 1

458. Deep dive on Predicate functional interface - Part 2
Bài tập coding 54: Filtering a List of Custom Objects
459. Deep dive on Function functional interface

Bài tập coding 55: Transforming a List of Strings
460. Deep dive on UnaryOperator interface
Bài tập coding 56: Incrementing a List of Integers
461. Deep dive on Consumer interface
Bài tập coding 57: String List Processing using Consumer interface
462. Deep dive on Supplier interface
Bài tập coding 58: Identify Current Day using Supplier
463. Deep dive on BiFunctional Interfaces - Part 1

464. Deep dive on BiFunctional Interfaces - Part 2
465. Primitive Type functional interfaces - Theory

466. Primitive Type functional interfaces - Demo
467. Deep dive on Lexical Scoping of Lambda expressions
468. this and super inside lambda expression
469. Funny memes around Functional Programming
470. DETAILS OF SOURCE CODE AND PDF CONTENT
471. Introduction to Method References
472. Demo of Static Method Reference
473. Demo of Instance Method Reference
474. Demo of Instance method Reference using Class type
475. Demo of Constructor Reference
476. DETAILS OF SOURCE CODE AND PDF CONTENT
477. Introduction to java.util.stream API
478. Creating a Stream from collections - Part 1
479. Creating a Stream from collections - Part 2

480. Streams have no storage
481. Introduction to Streams Pipeline
482. Demo of Streams map() method

483. Introduction to Streams flatMap() method
484. Demo of Streams flatMap() method

485. Demo of Streams filter() method
486. Demo of Streams limit() method
487. Demo of Streams skip() method
488. Streams are traversable only once
489. Introduction to Streams reduce() method
490. Demo of Streams reduce() method
491. Demo of Streams collect() method

492. Demo of Streams collectingAndThen() method

493. Demo of Streams groupingBy() and partitioningBy() method
494. Finding and Matching methods in Streams

495. Quick revision about stream pipeline
496. Deep dive on parallel streams and demo

497. Collections Vs Streams
498. DETAILS OF SOURCE CODE AND PDF CONTENT
499. Introduction to Optional class
500. Demo of Optional - Part 1
501. Demo of Optional - Part 2

502. Demo of ifPresent, ifPresentOrElse, orElse, orElseGet methods
503. Demo of orElseThrow, map, filter methods
504. Quick tip to filter null elements with Stream API
505. DETAILS OF SOURCE CODE AND PDF CONTENT
506. What is MultiThreading
507. How a program or a software executes inside a computer

508. Parallel vs Concurrent Execution
509. How multiple threads improve performance

510. Creating Threads in Java - Part 1

511. Creating Threads in Java - Part 2
512. MultiThreading Demo Program

513. Demo of Thread methods getId, threadId, getName, setName, currentThread, sleep

514. Demo of Thread method join, getPriority, setPriority

515. Demo of wait(), notify(), notifyAll() - Part 1
516. Demo of wait(), notify(), notifyAll() - Part 2
517. Introduction to Race condition & synchronized keyword
518. Demo of synchronized methods and blocks

519. Introduction to volatile keyword

520. Demo of volatile keyword
521. Introduction to Deadlock
522. Demo Deadlock & possible fixes

523. [JAVA 21] Introduction to Virtual Threads - Part 1
524. [JAVA 21] Introduction to Virtual Threads - Part 2

525. [JAVA 21] Introduction to Virtual Threads - Part 3
526. [JAVA 21] Demo of Virtual Threads

527. DETAILS OF SOURCE CODE AND PDF CONTENT
528. [JAVA 22] Launch Multi-File Source-Code Programs

529. [JAVA 22] Unnamed Variables & Patterns - Theory
530. [JAVA 22] Unnamed Variables & Patterns - Demo

531. [JAVA 23] Markdown Documentation Comments - Part 1
532. [JAVA 23] Markdown Documentation Comments - Part 2

533. [JAVA 24] Introduction to Stream Gatherers API
534. [JAVA 24] Getting to know the basic syntax of using Gatherer interface

535. [JAVA 24] Using Gatherer.of() to create an intermediate operation

536. [JAVA 24] Gatherers with Mutable State & Initializer

537. [JAVA 24] Finisher in a Stream Gatherer

538. [JAVA 24] Parallel Gatherers - Theory
539. [JAVA 24] Parallel Gatherers - Demo
540. [JAVA 24] Interrupting and Chaining Gatherers
541. [JAVA 24] fold(),scan(),mapConcurrent() methods in Gatherers

542. [JAVA 24] windowFixed, windowSliding methods in Gatherers
543. Congratulations & Thank You